version: "3.8"

services:
  server:
    build:
      context: ./server
    environment:
      - NODE_ENV=${NODE_ENV}
    ports:
      - "8080:8080"
    volumes:
      - type: bind
        source: ./server
        target: /app
    env_file:
      - .env
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
  es01:
    image: "docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2"
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      node.name: es01
      discovery.seed_hosts: es01,es02
      cluster.initial_master_nodes: es01,es02
      cluster.name: elastic_cluster
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: -Xms256m -Xmx256m
    volumes:
      - "es01-data:/usr/share/elasticsearch/data"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [ "CMD-SHELL", "curl http://localhost:9200" ]
      interval: 10s
      timeout: 10s
      retries: 40
  es02:
    image: "docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2"
    ports:
      - "9201:9200"
      - "9301:9300"
    environment:
      node.name: es02
      discovery.seed_hosts: es01,es02
      cluster.initial_master_nodes: es01,es02
      cluster.name: elastic_cluster
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: -Xms256m -Xmx256m
    volumes:
      - "es02-data:/usr/share/elasticsearch/data"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [ "CMD-SHELL", "curl http://localhost:9200" ]
      interval: 10s
      timeout: 10s
      retries: 40
  kibana:
    image: "docker.elastic.co/kibana/kibana-oss:7.10.2"
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
    ports:
      - "5601:5601"
    environment:
      - 'ELASTICSEARCH_HOSTS=["http://es01:9200","http://es02:9200"]'

volumes:
  es01-data:
  es02-data: